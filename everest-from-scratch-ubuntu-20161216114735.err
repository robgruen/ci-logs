E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/a/autotools-dev/autotools-dev_20150820.1_all.deb  Hash Sum mismatch

E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
debconf: delaying package configuration, since apt-utils is not installed
--2016-12-16 19:52:10--  https://github.com/Z3Prover/z3/releases/download/z3-4.5.0/z3-4.5.0-x64-ubuntu-14.04.zip
Resolving github.com (github.com)... 192.30.253.112, 192.30.253.113
Connecting to github.com (github.com)|192.30.253.112|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://github-cloud.s3.amazonaws.com/releases/32944298/6255ba38-a540-11e6-96e2-15164ee5d3d1.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAISTNZFOVBIJMK3TQ%2F20161216%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20161216T195203Z&X-Amz-Expires=300&X-Amz-Signature=a7dc5ea91dea95941175067fc2af5be072f455619aec372dcdd981eff97cec17&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Dz3-4.5.0-x64-ubuntu-14.04.zip&response-content-type=application%2Foctet-stream [following]
--2016-12-16 19:52:10--  https://github-cloud.s3.amazonaws.com/releases/32944298/6255ba38-a540-11e6-96e2-15164ee5d3d1.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAISTNZFOVBIJMK3TQ%2F20161216%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20161216T195203Z&X-Amz-Expires=300&X-Amz-Signature=a7dc5ea91dea95941175067fc2af5be072f455619aec372dcdd981eff97cec17&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Dz3-4.5.0-x64-ubuntu-14.04.zip&response-content-type=application%2Foctet-stream
Resolving github-cloud.s3.amazonaws.com (github-cloud.s3.amazonaws.com)... 52.216.225.16
Connecting to github-cloud.s3.amazonaws.com (github-cloud.s3.amazonaws.com)|52.216.225.16|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 30725443 (29M) [application/octet-stream]
Saving to: 'z3-4.5.0-x64-ubuntu-14.04.zip'

0K .......... .......... .......... .......... ..........  0%  231K 2m10s
50K .......... .......... .......... .......... ..........  0%  346K 1m48s
100K .......... .......... .......... .......... ..........  0%  667K 87s
150K .......... .......... .......... .......... ..........  0%  667K 76s
200K .......... .......... .......... .......... ..........  0%  358K 77s
250K .......... .......... .......... .......... ..........  0%  696K 72s
300K .......... .......... .......... .......... ..........  1%  695K 67s
350K .......... .......... .......... .......... ..........  1% 6.72M 59s
400K .......... .......... .......... .......... ..........  1%  709K 57s
450K .......... .......... .......... .......... ..........  1%  709K 56s
500K .......... .......... .......... .......... ..........  1%  714K 54s
550K .......... .......... .......... .......... ..........  1% 7.41M 50s
600K .......... .......... .......... .......... ..........  2%  739K 49s
650K .......... .......... .......... .......... ..........  2% 7.54M 46s
700K .......... .......... .......... .......... ..........  2%  741K 45s
750K .......... .......... .......... .......... ..........  2%  755K 45s
800K .......... .......... .......... .......... ..........  2% 7.14M 42s
850K .......... .......... .......... .......... ..........  2% 9.17M 40s
900K .......... .......... .......... .......... ..........  3%  778K 40s
950K .......... .......... .......... .......... ..........  3% 6.89M 38s
1000K .......... .......... .......... .......... ..........  3%  787K 38s
1050K .......... .......... .......... .......... ..........  3% 7.01M 36s
1100K .......... .......... .......... .......... ..........  3%  794K 36s
1150K .......... .......... .......... .......... ..........  3% 7.27M 35s
1200K .......... .......... .......... .......... ..........  4% 7.26M 34s
1250K .......... .......... .......... .......... ..........  4%  804K 34s
1300K .......... .......... .......... .......... ..........  4% 7.09M 32s
1350K .......... .......... .......... .......... ..........  4% 7.45M 31s
1400K .......... .......... .......... .......... ..........  4%  836K 31s
1450K .......... .......... .......... .......... ..........  4% 7.38M 30s
1500K .......... .......... .......... .......... ..........  5% 7.55M 29s
1550K .......... .......... .......... .......... ..........  5%  847K 30s
1600K .......... .......... .......... .......... ..........  5% 7.63M 29s
1650K .......... .......... .......... .......... ..........  5% 7.52M 28s
1700K .......... .......... .......... .......... ..........  5% 10.8M 27s
1750K .......... .......... .......... .......... ..........  5%  914K 27s
1800K .......... .......... .......... .......... ..........  6% 6.35M 27s
1850K .......... .......... .......... .......... ..........  6% 8.95M 26s
1900K .......... .......... .......... .......... ..........  6%  931K 26s
1950K .......... .......... .......... .......... ..........  6% 7.58M 25s
2000K .......... .......... .......... .......... ..........  6% 7.38M 25s
2050K .......... .......... .......... .......... ..........  6% 7.64M 24s
2100K .......... .......... .......... .......... ..........  7% 6.50M 24s
2150K .......... .......... .......... .......... ..........  7% 1003K 24s
2200K .......... .......... .......... .......... ..........  7% 10.4M 23s
2250K .......... .......... .......... .......... ..........  7% 9.45M 23s
2300K .......... .......... .......... .......... ..........  7% 10.4M 22s
2350K .......... .......... .......... .......... ..........  7%  851K 22s
2400K .......... .......... .......... .......... ..........  8% 6.99M 22s
2450K .......... .......... .......... .......... ..........  8% 5.93M 22s
2500K .......... .......... .......... .......... ..........  8% 7.45M 21s
2550K .......... .......... .......... .......... ..........  8% 11.1M 21s
2600K .......... .......... .......... .......... ..........  8% 1.07M 21s
2650K .......... .......... .......... .......... ..........  8% 6.73M 21s
2700K .......... .......... .......... .......... ..........  9% 7.42M 20s
2750K .......... .......... .......... .......... ..........  9% 7.44M 20s
2800K .......... .......... .......... .......... ..........  9% 10.2M 20s
2850K .......... .......... .......... .......... ..........  9% 1.12M 20s
2900K .......... .......... .......... .......... ..........  9% 9.88M 19s
2950K .......... .......... .......... .......... ..........  9% 10.2M 19s
3000K .......... .......... .......... .......... .......... 10% 9.75M 19s
3050K .......... .......... .......... .......... .......... 10% 11.2M 18s
3100K .......... .......... .......... .......... .......... 10% 10.7M 18s
3150K .......... .......... .......... .......... .......... 10% 1001K 18s
3200K .......... .......... .......... .......... .......... 10% 6.97M 18s
3250K .......... .......... .......... .......... .......... 10% 6.96M 18s
3300K .......... .......... .......... .......... .......... 11% 6.48M 17s
3350K .......... .......... .......... .......... .......... 11% 7.43M 17s
3400K .......... .......... .......... .......... .......... 11% 12.5M 17s
3450K .......... .......... .......... .......... .......... 11% 11.0M 17s
3500K .......... .......... .......... .......... .......... 11% 1.42M 17s
3550K .......... .......... .......... .......... .......... 11% 9.35M 16s
3600K .......... .......... .......... .......... .......... 12% 10.6M 16s
3650K .......... .......... .......... .......... .......... 12% 10.8M 16s
3700K .......... .......... .......... .......... .......... 12% 10.3M 16s
3750K .......... .......... .......... .......... .......... 12% 10.9M 16s
3800K .......... .......... .......... .......... .......... 12% 10.8M 15s
3850K .......... .......... .......... .......... .......... 12% 1.15M 15s
3900K .......... .......... .......... .......... .......... 13% 8.75M 15s
3950K .......... .......... .......... .......... .......... 13% 10.8M 15s
4000K .......... .......... .......... .......... .......... 13% 10.8M 15s
4050K .......... .......... .......... .......... .......... 13% 10.7M 15s
4100K .......... .......... .......... .......... .......... 13% 8.92M 15s
4150K .......... .......... .......... .......... .......... 13% 11.3M 14s
4200K .......... .......... .......... .......... .......... 14% 11.1M 14s
4250K .......... .......... .......... .......... .......... 14% 1.29M 14s
4300K .......... .......... .......... .......... .......... 14% 6.32M 14s
4350K .......... .......... .......... .......... .......... 14% 7.14M 14s
4400K .......... .......... .......... .......... .......... 14% 7.49M 14s
4450K .......... .......... .......... .......... .......... 14% 8.11M 14s
4500K .......... .......... .......... .......... .......... 15% 9.29M 14s
4550K .......... .......... .......... .......... .......... 15% 11.3M 13s
4600K .......... .......... .......... .......... .......... 15% 10.4M 13s
4650K .......... .......... .......... .......... .......... 15% 11.0M 13s
4700K .......... .......... .......... .......... .......... 15% 1.81M 13s
4750K .......... .......... .......... .......... .......... 15% 10.1M 13s
4800K .......... .......... .......... .......... .......... 16% 10.2M 13s
4850K .......... .......... .......... .......... .......... 16% 9.16M 13s
4900K .......... .......... .......... .......... .......... 16% 11.0M 13s
4950K .......... .......... .......... .......... .......... 16% 10.9M 12s
5000K .......... .......... .......... .......... .......... 16% 11.0M 12s
5050K .......... .......... .......... .......... .......... 16% 9.53M 12s
5100K .......... .......... .......... .......... .......... 17% 15.4M 12s
5150K .......... .......... .......... .......... .......... 17% 11.0M 12s
5200K .......... .......... .......... .......... .......... 17% 1.49M 12s
5250K .......... .......... .......... .......... .......... 17% 5.82M 12s
5300K .......... .......... .......... .......... .......... 17% 7.53M 12s
5350K .......... .......... .......... .......... .......... 17% 7.33M 12s
5400K .......... .......... .......... .......... .......... 18% 7.38M 12s
5450K .......... .......... .......... .......... .......... 18% 8.76M 11s
5500K .......... .......... .......... .......... .......... 18% 11.3M 11s
5550K .......... .......... .......... .......... .......... 18% 11.8M 11s
5600K .......... .......... .......... .......... .......... 18% 11.2M 11s
5650K .......... .......... .......... .......... .......... 18% 9.20M 11s
5700K .......... .......... .......... .......... .......... 19% 2.75M 11s
5750K .......... .......... .......... .......... .......... 19% 10.7M 11s
5800K .......... .......... .......... .......... .......... 19% 10.9M 11s
5850K .......... .......... .......... .......... .......... 19% 9.03M 11s
5900K .......... .......... .......... .......... .......... 19% 11.2M 11s
5950K .......... .......... .......... .......... .......... 19% 15.9M 10s
6000K .......... .......... .......... .......... .......... 20% 11.5M 10s
6050K .......... .......... .......... .......... .......... 20% 10.2M 10s
6100K .......... .......... .......... .......... .......... 20% 11.2M 10s
6150K .......... .......... .......... .......... .......... 20% 10.5M 10s
6200K .......... .......... .......... .......... .......... 20% 11.0M 10s
6250K .......... .......... .......... .......... .......... 20% 9.82M 10s
6300K .......... .......... .......... .......... .......... 21% 1.97M 10s
6350K .......... .......... .......... .......... .......... 21% 10.4M 10s
6400K .......... .......... .......... .......... .......... 21% 10.5M 10s
6450K .......... .......... .......... .......... .......... 21% 9.36M 10s
6500K .......... .......... .......... .......... .......... 21% 11.1M 10s
6550K .......... .......... .......... .......... .......... 21% 10.3M 10s
6600K .......... .......... .......... .......... .......... 22% 11.2M 9s
6650K .......... .......... .......... .......... .......... 22% 9.78M 9s
6700K .......... .......... .......... .......... .......... 22% 10.7M 9s
6750K .......... .......... .......... .......... .......... 22% 11.9M 9s
6800K .......... .......... .......... .......... .......... 22% 12.1M 9s
6850K .......... .......... .......... .......... .......... 22% 9.57M 9s
6900K .......... .......... .......... .......... .......... 23% 2.66M 9s
6950K .......... .......... .......... .......... .......... 23% 11.3M 9s
7000K .......... .......... .......... .......... .......... 23% 11.3M 9s
7050K .......... .......... .......... .......... .......... 23% 7.59M 9s
7100K .......... .......... .......... .......... .......... 23% 11.7M 9s
7150K .......... .......... .......... .......... .......... 23% 11.7M 9s
7200K .......... .......... .......... .......... .......... 24% 11.3M 9s
7250K .......... .......... .......... .......... .......... 24% 11.0M 9s
7300K .......... .......... .......... .......... .......... 24% 11.2M 9s
7350K .......... .......... .......... .......... .......... 24% 10.8M 8s
7400K .......... .......... .......... .......... .......... 24% 11.7M 8s
7450K .......... .......... .......... .......... .......... 24% 7.69M 8s
7500K .......... .......... .......... .......... .......... 25% 11.4M 8s
7550K .......... .......... .......... .......... .......... 25% 11.3M 8s
7600K .......... .......... .......... .......... .......... 25% 3.48M 8s
7650K .......... .......... .......... .......... .......... 25% 9.83M 8s
7700K .......... .......... .......... .......... .......... 25% 10.9M 8s
7750K .......... .......... .......... .......... .......... 25% 11.5M 8s
7800K .......... .......... .......... .......... .......... 26% 11.2M 8s
7850K .......... .......... .......... .......... .......... 26% 8.12M 8s
7900K .......... .......... .......... .......... .......... 26% 12.2M 8s
7950K .......... .......... .......... .......... .......... 26% 11.2M 8s
8000K .......... .......... .......... .......... .......... 26% 11.9M 8s
8050K .......... .......... .......... .......... .......... 26% 10.4M 8s
8100K .......... .......... .......... .......... .......... 27% 12.1M 8s
8150K .......... .......... .......... .......... .......... 27% 11.4M 8s
8200K .......... .......... .......... .......... .......... 27% 11.4M 8s
8250K .......... .......... .......... .......... .......... 27% 8.09M 8s
8300K .......... .......... .......... .......... .......... 27% 12.3M 7s
8350K .......... .......... .......... .......... .......... 27% 5.06M 7s
8400K .......... .......... .......... .......... .......... 28% 11.4M 7s
8450K .......... .......... .......... .......... .......... 28% 9.38M 7s
8500K .......... .......... .......... .......... .......... 28% 11.6M 7s
8550K .......... .......... .......... .......... .......... 28% 12.0M 7s
8600K .......... .......... .......... .......... .......... 28% 11.6M 7s
8650K .......... .......... .......... .......... .......... 28% 8.02M 7s
8700K .......... .......... .......... .......... .......... 29% 11.7M 7s
8750K .......... .......... .......... .......... .......... 29% 12.4M 7s
8800K .......... .......... .......... .......... .......... 29% 11.8M 7s
8850K .......... .......... .......... .......... .......... 29% 10.0M 7s
8900K .......... .......... .......... .......... .......... 29% 11.9M 7s
8950K .......... .......... .......... .......... .......... 29% 12.0M 7s
9000K .......... .......... .......... .......... .......... 30% 12.2M 7s
9050K .......... .......... .......... .......... .......... 30% 8.40M 7s
9100K .......... .......... .......... .......... .......... 30% 7.55M 7s
9150K .......... .......... .......... .......... .......... 30% 11.9M 7s
9200K .......... .......... .......... .......... .......... 30% 11.9M 7s
9250K .......... .......... .......... .......... .......... 30% 10.1M 7s
9300K .......... .......... .......... .......... .......... 31% 12.0M 7s
9350K .......... .......... .......... .......... .......... 31% 11.9M 7s
9400K .......... .......... .......... .......... .......... 31% 12.3M 6s
9450K .......... .......... .......... .......... .......... 31% 7.94M 6s
9500K .......... .......... .......... .......... .......... 31% 11.8M 6s
9550K .......... .......... .......... .......... .......... 31% 12.3M 6s
9600K .......... .......... .......... .......... .......... 32% 12.4M 6s
9650K .......... .......... .......... .......... .......... 32% 10.2M 6s
9700K .......... .......... .......... .......... .......... 32% 12.5M 6s
9750K .......... .......... .......... .......... .......... 32% 12.0M 6s
9800K .......... .......... .......... .......... .......... 32% 11.0M 6s
9850K .......... .......... .......... .......... .......... 32% 8.15M 6s
9900K .......... .......... .......... .......... .......... 33% 12.6M 6s
9950K .......... .......... .......... .......... .......... 33% 11.2M 6s
10000K .......... .......... .......... .......... .......... 33% 11.4M 6s
10050K .......... .......... .......... .......... .......... 33% 10.1M 6s
10100K .......... .......... .......... .......... .......... 33% 11.6M 6s
10150K .......... .......... .......... .......... .......... 33% 12.0M 6s
10200K .......... .......... .......... .......... .......... 34% 11.5M 6s
10250K .......... .......... .......... .......... .......... 34% 7.95M 6s
10300K .......... .......... .......... .......... .......... 34% 11.8M 6s
10350K .......... .......... .......... .......... .......... 34% 11.6M 6s
10400K .......... .......... .......... .......... .......... 34% 12.1M 6s
10450K .......... .......... .......... .......... .......... 34% 8.93M 6s
10500K .......... .......... .......... .......... .......... 35% 11.5M 6s
10550K .......... .......... .......... .......... .......... 35% 11.5M 6s
10600K .......... .......... .......... .......... .......... 35% 11.4M 6s
10650K .......... .......... .......... .......... .......... 35% 7.49M 6s
10700K .......... .......... .......... .......... .......... 35% 11.5M 6s
10750K .......... .......... .......... .......... .......... 35% 11.1M 6s
10800K .......... .......... .......... .......... .......... 36% 12.0M 5s
10850K .......... .......... .......... .......... .......... 36% 11.9M 5s
10900K .......... .......... .......... .......... .......... 36% 11.7M 5s
10950K .......... .......... .......... .......... .......... 36% 11.7M 5s
11000K .......... .......... .......... .......... .......... 36% 11.6M 5s
11050K .......... .......... .......... .......... .......... 36% 8.85M 5s
11100K .......... .......... .......... .......... .......... 37% 12.8M 5s
11150K .......... .......... .......... .......... .......... 37% 13.4M 5s
11200K .......... .......... .......... .......... .......... 37% 12.2M 5s
11250K .......... .......... .......... .......... .......... 37% 11.1M 5s
11300K .......... .......... .......... .......... .......... 37% 12.6M 5s
11350K .......... .......... .......... .......... .......... 37% 12.6M 5s
11400K .......... .......... .......... .......... .......... 38% 12.6M 5s
11450K .......... .......... .......... .......... .......... 38% 8.70M 5s
11500K .......... .......... .......... .......... .......... 38% 13.2M 5s
11550K .......... .......... .......... .......... .......... 38% 12.6M 5s
11600K .......... .......... .......... .......... .......... 38% 11.7M 5s
11650K .......... .......... .......... .......... .......... 38% 10.7M 5s
11700K .......... .......... .......... .......... .......... 39% 11.9M 5s
11750K .......... .......... .......... .......... .......... 39% 12.6M 5s
11800K .......... .......... .......... .......... .......... 39% 13.1M 5s
11850K .......... .......... .......... .......... .......... 39% 8.90M 5s
11900K .......... .......... .......... .......... .......... 39% 13.2M 5s
11950K .......... .......... .......... .......... .......... 39% 12.6M 5s
12000K .......... .......... .......... .......... .......... 40% 12.3M 5s
12050K .......... .......... .......... .......... .......... 40% 11.0M 5s
12100K .......... .......... .......... .......... .......... 40% 12.8M 5s
12150K .......... .......... .......... .......... .......... 40% 13.4M 5s
12200K .......... .......... .......... .......... .......... 40% 12.2M 5s
12250K .......... .......... .......... .......... .......... 40% 7.90M 5s
12300K .......... .......... .......... .......... .......... 41% 13.9M 5s
12350K .......... .......... .......... .......... .......... 41% 12.5M 5s
12400K .......... .......... .......... .......... .......... 41% 12.9M 5s
12450K .......... .......... .......... .......... .......... 41% 10.6M 5s
12500K .......... .......... .......... .......... .......... 41% 13.5M 5s
12550K .......... .......... .......... .......... .......... 41% 12.6M 4s
12600K .......... .......... .......... .......... .......... 42% 12.8M 4s
12650K .......... .......... .......... .......... .......... 42% 8.93M 4s
12700K .......... .......... .......... .......... .......... 42% 12.6M 4s
12750K .......... .......... .......... .......... .......... 42% 12.5M 4s
12800K .......... .......... .......... .......... .......... 42% 10.8M 4s
12850K .......... .......... .......... .......... .......... 42% 10.4M 4s
12900K .......... .......... .......... .......... .......... 43% 12.2M 4s
12950K .......... .......... .......... .......... .......... 43% 12.6M 4s
13000K .......... .......... .......... .......... .......... 43% 12.4M 4s
13050K .......... .......... .......... .......... .......... 43% 8.37M 4s
13100K .......... .......... .......... .......... .......... 43% 12.8M 4s
13150K .......... .......... .......... .......... .......... 43% 12.4M 4s
13200K .......... .......... .......... .......... .......... 44% 13.3M 4s
13250K .......... .......... .......... .......... .......... 44% 12.0M 4s
13300K .......... .......... .......... .......... .......... 44% 12.6M 4s
13350K .......... .......... .......... .......... .......... 44% 12.0M 4s
13400K .......... .......... .......... .......... .......... 44% 12.4M 4s
13450K .......... .......... .......... .......... .......... 44% 8.33M 4s
13500K .......... .......... .......... .......... .......... 45% 13.4M 4s
13550K .......... .......... .......... .......... .......... 45% 12.6M 4s
13600K .......... .......... .......... .......... .......... 45% 12.1M 4s
13650K .......... .......... .......... .......... .......... 45% 11.2M 4s
13700K .......... .......... .......... .......... .......... 45% 12.0M 4s
13750K .......... .......... .......... .......... .......... 45% 12.9M 4s
13800K .......... .......... .......... .......... .......... 46% 12.6M 4s
13850K .......... .......... .......... .......... .......... 46% 8.92M 4s
13900K .......... .......... .......... .......... .......... 46% 13.0M 4s
13950K .......... .......... .......... .......... .......... 46% 12.8M 4s
14000K .......... .......... .......... .......... .......... 46% 12.6M 4s
14050K .......... .......... .......... .......... .......... 46% 10.6M 4s
14100K .......... .......... .......... .......... .......... 47% 13.4M 4s
14150K .......... .......... .......... .......... .......... 47% 12.8M 4s
14200K .......... .......... .......... .......... .......... 47% 11.4M 4s
14250K .......... .......... .......... .......... .......... 47% 8.72M 4s
14300K .......... .......... .......... .......... .......... 47% 13.1M 4s
14350K .......... .......... .......... .......... .......... 47% 13.3M 4s
14400K .......... .......... .......... .......... .......... 48% 12.7M 4s
14450K .......... .......... .......... .......... .......... 48% 11.3M 4s
14500K .......... .......... .......... .......... .......... 48% 12.7M 4s
14550K .......... .......... .......... .......... .......... 48% 12.2M 4s
14600K .......... .......... .......... .......... .......... 48% 12.4M 4s
14650K .......... .......... .......... .......... .......... 48% 8.87M 4s
14700K .......... .......... .......... .......... .......... 49% 13.1M 4s
14750K .......... .......... .......... .......... .......... 49% 12.8M 4s
14800K .......... .......... .......... .......... .......... 49% 13.9M 4s
14850K .......... .......... .......... .......... .......... 49% 10.9M 3s
14900K .......... .......... .......... .......... .......... 49% 12.9M 3s
14950K .......... .......... .......... .......... .......... 49% 12.5M 3s
15000K .......... .......... .......... .......... .......... 50% 12.3M 3s
15050K .......... .......... .......... .......... .......... 50% 9.16M 3s
15100K .......... .......... .......... .......... .......... 50% 12.6M 3s
15150K .......... .......... .......... .......... .......... 50% 12.7M 3s
15200K .......... .......... .......... .......... .......... 50% 12.4M 3s
15250K .......... .......... .......... .......... .......... 50% 11.1M 3s
15300K .......... .......... .......... .......... .......... 51% 12.3M 3s
15350K .......... .......... .......... .......... .......... 51% 12.3M 3s
15400K .......... .......... .......... .......... .......... 51% 12.7M 3s
15450K .......... .......... .......... .......... .......... 51% 8.45M 3s
15500K .......... .......... .......... .......... .......... 51% 13.0M 3s
15550K .......... .......... .......... .......... .......... 51% 13.2M 3s
15600K .......... .......... .......... .......... .......... 52% 12.5M 3s
15650K .......... .......... .......... .......... .......... 52% 10.5M 3s
15700K .......... .......... .......... .......... .......... 52% 11.4M 3s
15750K .......... .......... .......... .......... .......... 52% 12.8M 3s
15800K .......... .......... .......... .......... .......... 52% 12.6M 3s
15850K .......... .......... .......... .......... .......... 52% 8.79M 3s
15900K .......... .......... .......... .......... .......... 53% 12.4M 3s
15950K .......... .......... .......... .......... .......... 53% 13.4M 3s
16000K .......... .......... .......... .......... .......... 53% 12.3M 3s
16050K .......... .......... .......... .......... .......... 53% 11.8M 3s
16100K .......... .......... .......... .......... .......... 53% 13.3M 3s
16150K .......... .......... .......... .......... .......... 53% 11.9M 3s
16200K .......... .......... .......... .......... .......... 54% 13.5M 3s
16250K .......... .......... .......... .......... .......... 54% 8.57M 3s
16300K .......... .......... .......... .......... .......... 54% 12.8M 3s
16350K .......... .......... .......... .......... .......... 54% 13.3M 3s
16400K .......... .......... .......... .......... .......... 54% 13.6M 3s
16450K .......... .......... .......... .......... .......... 54% 10.9M 3s
16500K .......... .......... .......... .......... .......... 55% 12.9M 3s
16550K .......... .......... .......... .......... .......... 55% 12.9M 3s
16600K .......... .......... .......... .......... .......... 55% 12.8M 3s
16650K .......... .......... .......... .......... .......... 55% 8.45M 3s
16700K .......... .......... .......... .......... .......... 55% 13.0M 3s
16750K .......... .......... .......... .......... .......... 55% 13.3M 3s
16800K .......... .......... .......... .......... .......... 56% 11.2M 3s
16850K .......... .......... .......... .......... .......... 56% 10.5M 3s
16900K .......... .......... .......... .......... .......... 56% 13.3M 3s
16950K .......... .......... .......... .......... .......... 56% 12.3M 3s
17000K .......... .......... .......... .......... .......... 56% 12.7M 3s
17050K .......... .......... .......... .......... .......... 56% 8.44M 3s
17100K .......... .......... .......... .......... .......... 57% 12.6M 3s
17150K .......... .......... .......... .......... .......... 57% 12.1M 3s
17200K .......... .......... .......... .......... .......... 57% 12.4M 3s
17250K .......... .......... .......... .......... .......... 57% 10.7M 3s
17300K .......... .......... .......... .......... .......... 57% 12.4M 3s
17350K .......... .......... .......... .......... .......... 57% 13.7M 3s
17400K .......... .......... .......... .......... .......... 58% 12.5M 3s
17450K .......... .......... .......... .......... .......... 58% 8.57M 3s
17500K .......... .......... .......... .......... .......... 58% 11.5M 3s
17550K .......... .......... .......... .......... .......... 58% 12.6M 3s
17600K .......... .......... .......... .......... .......... 58% 12.7M 3s
17650K .......... .......... .......... .......... .......... 58% 10.4M 3s
17700K .......... .......... .......... .......... .......... 59% 11.5M 3s
17750K .......... .......... .......... .......... .......... 59% 13.0M 3s
17800K .......... .......... .......... .......... .......... 59% 12.2M 3s
17850K .......... .......... .......... .......... .......... 59% 8.94M 3s
17900K .......... .......... .......... .......... .......... 59% 12.8M 2s
17950K .......... .......... .......... .......... .......... 59% 12.8M 2s
18000K .......... .......... .......... .......... .......... 60% 12.9M 2s
18050K .......... .......... .......... .......... .......... 60% 11.7M 2s
18100K .......... .......... .......... .......... .......... 60% 12.5M 2s
18150K .......... .......... .......... .......... .......... 60% 12.2M 2s
18200K .......... .......... .......... .......... .......... 60% 12.1M 2s
18250K .......... .......... .......... .......... .......... 60% 8.92M 2s
18300K .......... .......... .......... .......... .......... 61% 12.3M 2s
18350K .......... .......... .......... .......... .......... 61% 12.3M 2s
18400K .......... .......... .......... .......... .......... 61% 12.9M 2s
18450K .......... .......... .......... .......... .......... 61% 11.1M 2s
18500K .......... .......... .......... .......... .......... 61% 11.6M 2s
18550K .......... .......... .......... .......... .......... 61% 12.9M 2s
18600K .......... .......... .......... .......... .......... 62% 12.6M 2s
18650K .......... .......... .......... .......... .......... 62% 8.02M 2s
18700K .......... .......... .......... .......... .......... 62% 12.9M 2s
18750K .......... .......... .......... .......... .......... 62% 11.8M 2s
18800K .......... .......... .......... .......... .......... 62% 12.3M 2s
18850K .......... .......... .......... .......... .......... 62% 10.6M 2s
18900K .......... .......... .......... .......... .......... 63% 12.6M 2s
18950K .......... .......... .......... .......... .......... 63% 13.1M 2s
19000K .......... .......... .......... .......... .......... 63% 11.4M 2s
19050K .......... .......... .......... .......... .......... 63% 8.09M 2s
19100K .......... .......... .......... .......... .......... 63% 12.8M 2s
19150K .......... .......... .......... .......... .......... 63% 12.7M 2s
19200K .......... .......... .......... .......... .......... 64% 11.9M 2s
19250K .......... .......... .......... .......... .......... 64% 11.4M 2s
19300K .......... .......... .......... .......... .......... 64% 12.7M 2s
19350K .......... .......... .......... .......... .......... 64% 11.6M 2s
19400K .......... .......... .......... .......... .......... 64% 12.8M 2s
19450K .......... .......... .......... .......... .......... 64% 8.50M 2s
19500K .......... .......... .......... .......... .......... 65% 12.8M 2s
19550K .......... .......... .......... .......... .......... 65% 12.4M 2s
19600K .......... .......... .......... .......... .......... 65% 12.4M 2s
19650K .......... .......... .......... .......... .......... 65% 11.4M 2s
19700K .......... .......... .......... .......... .......... 65% 12.8M 2s
19750K .......... .......... .......... .......... .......... 65% 12.8M 2s
19800K .......... .......... .......... .......... .......... 66% 12.5M 2s
19850K .......... .......... .......... .......... .......... 66% 8.70M 2s
19900K .......... .......... .......... .......... .......... 66% 12.3M 2s
19950K .......... .......... .......... .......... .......... 66% 12.7M 2s
20000K .......... .......... .......... .......... .......... 66% 12.9M 2s
20050K .......... .......... .......... .......... .......... 66% 11.1M 2s
20100K .......... .......... .......... .......... .......... 67% 13.2M 2s
20150K .......... .......... .......... .......... .......... 67% 12.8M 2s
20200K .......... .......... .......... .......... .......... 67% 12.6M 2s
20250K .......... .......... .......... .......... .......... 67% 8.56M 2s
20300K .......... .......... .......... .......... .......... 67% 11.8M 2s
20350K .......... .......... .......... .......... .......... 67% 13.4M 2s
20400K .......... .......... .......... .......... .......... 68% 12.8M 2s
20450K .......... .......... .......... .......... .......... 68% 10.9M 2s
20500K .......... .......... .......... .......... .......... 68% 12.7M 2s
20550K .......... .......... .......... .......... .......... 68% 13.2M 2s
20600K .......... .......... .......... .......... .......... 68% 12.9M 2s
20650K .......... .......... .......... .......... .......... 68% 8.65M 2s
20700K .......... .......... .......... .......... .......... 69% 12.9M 2s
20750K .......... .......... .......... .......... .......... 69% 12.6M 2s
20800K .......... .......... .......... .......... .......... 69% 12.8M 2s
20850K .......... .......... .......... .......... .......... 69% 10.6M 2s
20900K .......... .......... .......... .......... .......... 69% 13.3M 2s
20950K .......... .......... .......... .......... .......... 69% 13.0M 2s
21000K .......... .......... .......... .......... .......... 70% 13.3M 2s
21050K .......... .......... .......... .......... .......... 70% 8.71M 2s
21100K .......... .......... .......... .......... .......... 70% 12.6M 2s
21150K .......... .......... .......... .......... .......... 70% 11.3M 2s
21200K .......... .......... .......... .......... .......... 70% 13.0M 2s
21250K .......... .......... .......... .......... .......... 70% 10.8M 2s
21300K .......... .......... .......... .......... .......... 71% 12.4M 2s
21350K .......... .......... .......... .......... .......... 71% 13.1M 2s
21400K .......... .......... .......... .......... .......... 71% 11.7M 2s
21450K .......... .......... .......... .......... .......... 71% 10.1M 2s
21500K .......... .......... .......... .......... .......... 71% 12.8M 2s
21550K .......... .......... .......... .......... .......... 71% 13.2M 2s
21600K .......... .......... .......... .......... .......... 72% 12.8M 2s
21650K .......... .......... .......... .......... .......... 72% 11.1M 2s
21700K .......... .......... .......... .......... .......... 72% 13.0M 2s
21750K .......... .......... .......... .......... .......... 72% 11.8M 2s
21800K .......... .......... .......... .......... .......... 72% 7.64M 2s
21850K .......... .......... .......... .......... .......... 72% 15.5M 1s
21900K .......... .......... .......... .......... .......... 73% 13.1M 1s
21950K .......... .......... .......... .......... .......... 73% 12.4M 1s
22000K .......... .......... .......... .......... .......... 73% 12.2M 1s
22050K .......... .......... .......... .......... .......... 73% 11.1M 1s
22100K .......... .......... .......... .......... .......... 73% 12.0M 1s
22150K .......... .......... .......... .......... .......... 73% 13.3M 1s
22200K .......... .......... .......... .......... .......... 74% 12.1M 1s
22250K .......... .......... .......... .......... .......... 74% 8.64M 1s
22300K .......... .......... .......... .......... .......... 74% 12.7M 1s
22350K .......... .......... .......... .......... .......... 74% 12.9M 1s
22400K .......... .......... .......... .......... .......... 74% 13.3M 1s
22450K .......... .......... .......... .......... .......... 74% 11.0M 1s
22500K .......... .......... .......... .......... .......... 75% 12.5M 1s
22550K .......... .......... .......... .......... .......... 75% 13.1M 1s
22600K .......... .......... .......... .......... .......... 75% 12.2M 1s
22650K .......... .......... .......... .......... .......... 75% 8.06M 1s
22700K .......... .......... .......... .......... .......... 75% 11.8M 1s
22750K .......... .......... .......... .......... .......... 75% 12.8M 1s
22800K .......... .......... .......... .......... .......... 76% 12.7M 1s
22850K .......... .......... .......... .......... .......... 76% 11.1M 1s
22900K .......... .......... .......... .......... .......... 76% 11.6M 1s
22950K .......... .......... .......... .......... .......... 76% 12.5M 1s
23000K .......... .......... .......... .......... .......... 76% 12.2M 1s
23050K .......... .......... .......... .......... .......... 76% 8.24M 1s
23100K .......... .......... .......... .......... .......... 77% 12.3M 1s
23150K .......... .......... .......... .......... .......... 77% 12.8M 1s
23200K .......... .......... .......... .......... .......... 77% 11.3M 1s
23250K .......... .......... .......... .......... .......... 77% 11.1M 1s
23300K .......... .......... .......... .......... .......... 77% 12.8M 1s
23350K .......... .......... .......... .......... .......... 77% 12.9M 1s
23400K .......... .......... .......... .......... .......... 78% 12.2M 1s
23450K .......... .......... .......... .......... .......... 78% 8.51M 1s
23500K .......... .......... .......... .......... .......... 78% 11.6M 1s
23550K .......... .......... .......... .......... .......... 78% 12.3M 1s
23600K .......... .......... .......... .......... .......... 78% 13.1M 1s
23650K .......... .......... .......... .......... .......... 78% 11.2M 1s
23700K .......... .......... .......... .......... .......... 79% 12.7M 1s
23750K .......... .......... .......... .......... .......... 79% 12.8M 1s
23800K .......... .......... .......... .......... .......... 79% 12.8M 1s
23850K .......... .......... .......... .......... .......... 79% 8.59M 1s
23900K .......... .......... .......... .......... .......... 79% 12.1M 1s
23950K .......... .......... .......... .......... .......... 79% 12.8M 1s
24000K .......... .......... .......... .......... .......... 80% 13.0M 1s
24050K .......... .......... .......... .......... .......... 80% 10.9M 1s
24100K .......... .......... .......... .......... .......... 80% 12.5M 1s
24150K .......... .......... .......... .......... .......... 80% 12.6M 1s
24200K .......... .......... .......... .......... .......... 80% 12.5M 1s
24250K .......... .......... .......... .......... .......... 80% 7.55M 1s
24300K .......... .......... .......... .......... .......... 81% 11.9M 1s
24350K .......... .......... .......... .......... .......... 81% 12.9M 1s
24400K .......... .......... .......... .......... .......... 81% 12.5M 1s
24450K .......... .......... .......... .......... .......... 81% 10.3M 1s
24500K .......... .......... .......... .......... .......... 81% 12.7M 1s
24550K .......... .......... .......... .......... .......... 81% 13.0M 1s
24600K .......... .......... .......... .......... .......... 82% 12.1M 1s
24650K .......... .......... .......... .......... .......... 82% 8.85M 1s
24700K .......... .......... .......... .......... .......... 82% 12.8M 1s
24750K .......... .......... .......... .......... .......... 82% 12.5M 1s
24800K .......... .......... .......... .......... .......... 82% 12.3M 1s
24850K .......... .......... .......... .......... .......... 82% 10.7M 1s
24900K .......... .......... .......... .......... .......... 83% 12.8M 1s
24950K .......... .......... .......... .......... .......... 83% 12.0M 1s
25000K .......... .......... .......... .......... .......... 83% 12.8M 1s
25050K .......... .......... .......... .......... .......... 83% 9.02M 1s
25100K .......... .......... .......... .......... .......... 83% 11.7M 1s
25150K .......... .......... .......... .......... .......... 83% 12.3M 1s
25200K .......... .......... .......... .......... .......... 84% 12.0M 1s
25250K .......... .......... .......... .......... .......... 84% 11.2M 1s
25300K .......... .......... .......... .......... .......... 84% 11.3M 1s
25350K .......... .......... .......... .......... .......... 84% 12.5M 1s
25400K .......... .......... .......... .......... .......... 84% 11.8M 1s
25450K .......... .......... .......... .......... .......... 84% 8.41M 1s
25500K .......... .......... .......... .......... .......... 85% 11.6M 1s
25550K .......... .......... .......... .......... .......... 85% 12.0M 1s
25600K .......... .......... .......... .......... .......... 85% 13.3M 1s
25650K .......... .......... .......... .......... .......... 85% 10.4M 1s
25700K .......... .......... .......... .......... .......... 85% 12.9M 1s
25750K .......... .......... .......... .......... .......... 85% 11.0M 1s
25800K .......... .......... .......... .......... .......... 86% 12.2M 1s
25850K .......... .......... .......... .......... .......... 86% 7.72M 1s
25900K .......... .......... .......... .......... .......... 86% 12.0M 1s
25950K .......... .......... .......... .......... .......... 86% 12.4M 1s
26000K .......... .......... .......... .......... .......... 86% 12.2M 1s
26050K .......... .......... .......... .......... .......... 86% 10.8M 1s
26100K .......... .......... .......... .......... .......... 87% 11.8M 1s
26150K .......... .......... .......... .......... .......... 87% 12.0M 1s
26200K .......... .......... .......... .......... .......... 87% 12.2M 1s
26250K .......... .......... .......... .......... .......... 87% 8.01M 1s
26300K .......... .......... .......... .......... .......... 87% 12.7M 1s
26350K .......... .......... .......... .......... .......... 87% 11.4M 1s
26400K .......... .......... .......... .......... .......... 88% 11.5M 1s
26450K .......... .......... .......... .......... .......... 88% 9.45M 1s
26500K .......... .......... .......... .......... .......... 88% 12.1M 1s
26550K .......... .......... .......... .......... .......... 88% 12.6M 1s
26600K .......... .......... .......... .......... .......... 88% 12.4M 1s
26650K .......... .......... .......... .......... .......... 88% 8.40M 1s
26700K .......... .......... .......... .......... .......... 89% 12.8M 1s
26750K .......... .......... .......... .......... .......... 89% 12.9M 1s
26800K .......... .......... .......... .......... .......... 89% 12.7M 1s
26850K .......... .......... .......... .......... .......... 89% 11.9M 1s
26900K .......... .......... .......... .......... .......... 89% 12.3M 1s
26950K .......... .......... .......... .......... .......... 89% 12.4M 0s
27000K .......... .......... .......... .......... .......... 90% 12.4M 0s
27050K .......... .......... .......... .......... .......... 90% 8.46M 0s
27100K .......... .......... .......... .......... .......... 90% 12.4M 0s
27150K .......... .......... .......... .......... .......... 90% 13.2M 0s
27200K .......... .......... .......... .......... .......... 90% 12.5M 0s
27250K .......... .......... .......... .......... .......... 90% 10.9M 0s
27300K .......... .......... .......... .......... .......... 91% 12.4M 0s
27350K .......... .......... .......... .......... .......... 91% 12.5M 0s
27400K .......... .......... .......... .......... .......... 91% 13.2M 0s
27450K .......... .......... .......... .......... .......... 91% 8.56M 0s
27500K .......... .......... .......... .......... .......... 91% 12.5M 0s
27550K .......... .......... .......... .......... .......... 91% 12.8M 0s
27600K .......... .......... .......... .......... .......... 92% 12.5M 0s
27650K .......... .......... .......... .......... .......... 92% 11.4M 0s
27700K .......... .......... .......... .......... .......... 92% 13.0M 0s
27750K .......... .......... .......... .......... .......... 92% 12.6M 0s
27800K .......... .......... .......... .......... .......... 92% 12.4M 0s
27850K .......... .......... .......... .......... .......... 92% 8.48M 0s
27900K .......... .......... .......... .......... .......... 93% 13.1M 0s
27950K .......... .......... .......... .......... .......... 93% 12.6M 0s
28000K .......... .......... .......... .......... .......... 93% 11.9M 0s
28050K .......... .......... .......... .......... .......... 93% 10.7M 0s
28100K .......... .......... .......... .......... .......... 93% 13.5M 0s
28150K .......... .......... .......... .......... .......... 93% 13.2M 0s
28200K .......... .......... .......... .......... .......... 94% 12.8M 0s
28250K .......... .......... .......... .......... .......... 94% 9.33M 0s
28300K .......... .......... .......... .......... .......... 94% 12.7M 0s
28350K .......... .......... .......... .......... .......... 94% 12.8M 0s
28400K .......... .......... .......... .......... .......... 94% 12.4M 0s
28450K .......... .......... .......... .......... .......... 94% 11.0M 0s
28500K .......... .......... .......... .......... .......... 95% 13.1M 0s
28550K .......... .......... .......... .......... .......... 95% 13.1M 0s
28600K .......... .......... .......... .......... .......... 95% 12.7M 0s
28650K .......... .......... .......... .......... .......... 95% 9.30M 0s
28700K .......... .......... .......... .......... .......... 95% 12.9M 0s
28750K .......... .......... .......... .......... .......... 95% 12.9M 0s
28800K .......... .......... .......... .......... .......... 96% 12.9M 0s
28850K .......... .......... .......... .......... .......... 96% 11.0M 0s
28900K .......... .......... .......... .......... .......... 96% 13.0M 0s
28950K .......... .......... .......... .......... .......... 96% 12.0M 0s
29000K .......... .......... .......... .......... .......... 96% 12.8M 0s
29050K .......... .......... .......... .......... .......... 96% 8.69M 0s
29100K .......... .......... .......... .......... .......... 97% 12.9M 0s
29150K .......... .......... .......... .......... .......... 97% 13.6M 0s
29200K .......... .......... .......... .......... .......... 97% 12.8M 0s
29250K .......... .......... .......... .......... .......... 97% 11.1M 0s
29300K .......... .......... .......... .......... .......... 97% 13.0M 0s
29350K .......... .......... .......... .......... .......... 97% 12.6M 0s
29400K .......... .......... .......... .......... .......... 98% 12.3M 0s
29450K .......... .......... .......... .......... .......... 98% 8.99M 0s
29500K .......... .......... .......... .......... .......... 98% 12.8M 0s
29550K .......... .......... .......... .......... .......... 98% 13.0M 0s
29600K .......... .......... .......... .......... .......... 98% 12.7M 0s
29650K .......... .......... .......... .......... .......... 98% 10.7M 0s
29700K .......... .......... .......... .......... .......... 99% 12.7M 0s
29750K .......... .......... .......... .......... .......... 99% 12.8M 0s
29800K .......... .......... .......... .......... .......... 99% 12.7M 0s
29850K .......... .......... .......... .......... .......... 99% 8.48M 0s
29900K .......... .......... .......... .......... .......... 99% 10.8M 0s
29950K .......... .......... .......... .......... .......... 99% 1.33M 0s
30000K .....                                                 100% 40.0M=4.7s

2016-12-16 19:52:15 (6.17 MB/s) - 'z3-4.5.0-x64-ubuntu-14.04.zip' saved [30725443/30725443]

Cloning into 'everest'...
[WARNING] Running as root is not recommended
[WARNING] Running as root is not recommended
[WARNING] Running as root is not recommended
[WARNING] Running as root is not recommended
Cloning into 'mitls-fstar'...
Warning: Permanently added the RSA host key for IP address '192.30.253.113' to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Cloning into 'mitls-fstar'...
Switched to a new branch 'adl_lowlevel_merge'
Cloning into 'Spartan'...
Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Cloning into 'Spartan'...
fatal: could not read Username for 'https://msresearch.visualstudio.com': terminal prompts disabled
Cloning into 'FStar'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Cloning into 'FStar'...
Switched to a new branch 'c_record_aead'
Cloning into 'hacl-star'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Cloning into 'hacl-star'...
Switched to a new branch 'jk_low_level_crypto'
Cloning into 'kremlin'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Cloning into 'kremlin'...
Already on 'master'
Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
6 shift/reduce conflicts.
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
Cloning into 'ucontrib/CoreCrypto/ml/openssl'...
ar: creating libcrypto.a
ar: creating libssl.a
openssl_stub.c: In function 'ocaml_openssl_init':
openssl_stub.c:93:3: warning: implicit declaration of function 'OPENSSL_config' [-Wimplicit-function-declaration]
OPENSSL_config("CoreCrypto");
^
openssl_stub.c: In function 'ocaml_rsa_gen_key':
openssl_stub.c:668:23: warning: passing argument 2 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:668:29: warning: passing argument 3 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:668:35: warning: passing argument 4 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c: In function 'ocaml_rsa_get_key':
openssl_stub.c:779:21: warning: passing argument 2 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:779:27: warning: passing argument 3 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:779:33: warning: passing argument 4 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c: In function 'ocaml_rsa_encrypt':
openssl_stub.c:823:23: warning: passing argument 2 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:823:29: warning: passing argument 3 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:823:35: warning: passing argument 4 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c: In function 'ocaml_rsa_decrypt':
openssl_stub.c:878:23: warning: passing argument 2 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:878:29: warning: passing argument 3 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:878:35: warning: passing argument 4 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c: In function 'ocaml_rsa_sign':
openssl_stub.c:922:23: warning: passing argument 2 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:922:29: warning: passing argument 3 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:922:35: warning: passing argument 4 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c: In function 'ocaml_rsa_verify':
openssl_stub.c:975:23: warning: passing argument 2 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:975:29: warning: passing argument 3 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c:975:35: warning: passing argument 4 of 'RSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
RSA_get0_key(rsa, &b_n, &b_e, &b_d);
^
In file included from openssl_stub.c:22:0:
openssl/include/openssl/rsa.h:181:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void RSA_get0_key(const RSA *r,
^
openssl_stub.c: In function 'ocaml_dsa_gen_params':
openssl_stub.c:1087:23: warning: passing argument 2 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1087:29: warning: passing argument 3 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1087:35: warning: passing argument 4 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c: In function 'ocaml_dsa_gen_key':
openssl_stub.c:1144:23: warning: passing argument 2 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c:1144:31: warning: passing argument 3 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c: In function 'ocaml_dsa_get_key':
openssl_stub.c:1183:21: warning: passing argument 2 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1183:27: warning: passing argument 3 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1183:33: warning: passing argument 4 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1190:21: warning: passing argument 2 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c:1190:29: warning: passing argument 3 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c: In function 'ocaml_dsa_set_key':
openssl_stub.c:1235:23: warning: passing argument 2 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1235:29: warning: passing argument 3 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1235:35: warning: passing argument 4 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1236:23: warning: passing argument 2 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c:1236:31: warning: passing argument 3 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c: In function 'ocaml_dsa_sign':
openssl_stub.c:1325:23: warning: passing argument 2 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1325:29: warning: passing argument 3 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1325:35: warning: passing argument 4 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1326:23: warning: passing argument 2 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c:1326:31: warning: passing argument 3 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c: In function 'ocaml_dsa_verify':
openssl_stub.c:1368:23: warning: passing argument 2 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1368:29: warning: passing argument 3 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1368:35: warning: passing argument 4 of 'DSA_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_pqg(dsa, &b_p, &b_q, &b_g);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:173:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_pqg(const DSA *d,
^
openssl_stub.c:1369:23: warning: passing argument 2 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c:1369:31: warning: passing argument 3 of 'DSA_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DSA_get0_key(dsa, &b_pub, &b_priv);
^
In file included from openssl_stub.c:23:0:
openssl/include/openssl/dsa.h:176:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DSA_get0_key(const DSA *d,
^
openssl_stub.c: In function 'ocaml_dh_gen_params':
openssl_stub.c:1473:21: warning: passing argument 2 of 'DH_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_pqg(dh, &b_p, &b_q, &b_g);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:154:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_pqg(const DH *dh,
^
openssl_stub.c:1473:27: warning: passing argument 3 of 'DH_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_pqg(dh, &b_p, &b_q, &b_g);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:154:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_pqg(const DH *dh,
^
openssl_stub.c:1473:33: warning: passing argument 4 of 'DH_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_pqg(dh, &b_p, &b_q, &b_g);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:154:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_pqg(const DH *dh,
^
openssl_stub.c: In function 'ocaml_dh_params_of_string':
openssl_stub.c:1506:21: warning: passing argument 2 of 'DH_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_pqg(dh, &b_p, &b_q, &b_g);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:154:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_pqg(const DH *dh,
^
openssl_stub.c:1506:27: warning: passing argument 3 of 'DH_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_pqg(dh, &b_p, &b_q, &b_g);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:154:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_pqg(const DH *dh,
^
openssl_stub.c:1506:33: warning: passing argument 4 of 'DH_get0_pqg' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_pqg(dh, &b_p, &b_q, &b_g);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:154:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_pqg(const DH *dh,
^
openssl_stub.c: In function 'ocaml_dh_gen_key':
openssl_stub.c:1561:21: warning: passing argument 2 of 'DH_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_key(dh, &b_pub, &b_prv);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:157:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_key(const DH *dh,
^
openssl_stub.c:1561:29: warning: passing argument 3 of 'DH_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_key(dh, &b_pub, &b_prv);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:157:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_key(const DH *dh,
^
openssl_stub.c: In function 'ocaml_dh_compute':
openssl_stub.c:1672:21: warning: passing argument 2 of 'DH_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_key(dh, &b_pub, &b_prv);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:157:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_key(const DH *dh,
^
openssl_stub.c:1672:29: warning: passing argument 3 of 'DH_get0_key' from incompatible pointer type [-Wincompatible-pointer-types]
DH_get0_key(dh, &b_pub, &b_prv);
^
In file included from openssl/include/openssl/dsa.h:31:0,
from openssl_stub.c:23:
openssl/include/openssl/dh.h:157:6: note: expected 'const BIGNUM ** {aka const struct bignum_st **}' but argument is of type 'BIGNUM ** {aka struct bignum_st **}'
void DH_get0_key(const DH *dh,
^
openssl_stub.c: In function 'ocaml_load_chain':
openssl_stub.c:2198:16: warning: variable 'first' set but not used [-Wunused-but-set-variable]
X509 *x509, *first = NULL;
^
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
Warning 6: in the definition of buf, after the definition of m0, in top-level declaration Crypto.Symmetric.Bytes.random_bytes, in file Crypto_Symmetric_Bytes: stack newbuf 0uint8 @1 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of state, in top-level declaration Crypto.Symmetric.AES.cipher, in file Crypto_Symmetric_AES: stack newbuf 0uint8 Crypto.Symmetric.AES.blocklen is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of state, in top-level declaration Crypto.Symmetric.AES.inv_cipher, in file Crypto_Symmetric_AES: stack newbuf 0uint8 Crypto.Symmetric.AES.blocklen is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of state, in top-level declaration Crypto.Symmetric.AES128.cipher, in file Crypto_Symmetric_AES128: stack newbuf 0uint8 Crypto.Symmetric.AES128.blocklen is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of state, in top-level declaration Crypto.Symmetric.AES128.inv_cipher, in file Crypto_Symmetric_AES128: stack newbuf 0uint8 Crypto.Symmetric.AES128.blocklen is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in top-level declaration Crypto.Symmetric.MAC.rcreate, in file Crypto_Symmetric_MAC: eternal newbuf 0uint8 Crypto.Symmetric.MAC.wlen is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of k, in top-level declaration Crypto.Symmetric.UF1CMA.akey_gen, in file Crypto_Symmetric_UF1CMA: eternal newbuf 0uint8 Crypto.Symmetric.UF1CMA.skeylen @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of sk, in top-level declaration Crypto.Symmetric.UF1CMA.akey_coerce, in file Crypto_Symmetric_UF1CMA: eternal newbuf 0uint8 Crypto.Symmetric.UF1CMA.skeylen @1 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of k, after the definition of len, in top-level declaration Crypto.Symmetric.UF1CMA.gen, in file Crypto_Symmetric_UF1CMA: eternal newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in top-level declaration Crypto.Plain.create, in file Crypto_Plain: stack newbuf @1 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of keystate, after the definition of mac_rgn, in top-level declaration Crypto.Symmetric.PRF.gen, in file Crypto_Symmetric_PRF: eternal newbuf 0uint8 Crypto.Symmetric.PRF.statelen @1 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of key, after the definition of keystate, in top-level declaration Crypto.Symmetric.PRF.gen, in file Crypto_Symmetric_PRF: stack newbuf 0uint8 Crypto.Symmetric.PRF.keylen @2 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of keystate, after the definition of mac_rgn, in top-level declaration Crypto.Symmetric.PRF.coerce, in file Crypto_Symmetric_PRF: eternal newbuf 0uint8 Crypto.Symmetric.PRF.statelen @2 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of keyBuffer, after the definition of macId, in top-level declaration Crypto.Symmetric.PRF.prf_mac, in file Crypto_Symmetric_PRF: eternal newbuf 0uint8 Crypto.Symmetric.UF1CMA.keylen @6 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of keyBuffer, after the definition of x, in top-level declaration Crypto.Symmetric.PRF.prf_sk0, in file Crypto_Symmetric_PRF: eternal newbuf 0uint8 Crypto.Symmetric.UF1CMA.skeylen @3 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of cipher, after the definition of cipherlen, in top-level declaration Crypto.KrmlTest.test, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of cipher, after the definition of cipherlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm, in file Crypto_KrmlTest: stack newbuf 2uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of plain, after the definition of plainlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm_0, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of aad, after the definition of aadlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm_0, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of plain, after the definition of plainlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm_1, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of aad, after the definition of aadlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm_1, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of plain, after the definition of plainlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm_2, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of aad, after the definition of aadlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm_2, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Warning 6: in the definition of aad, after the definition of aadlen, in top-level declaration Crypto.KrmlTest.test_aes_gcm_3, in file Crypto_KrmlTest: stack newbuf 0uint8 @0 is a non-constant size, stack-allocated array; this is not supported by CompCert
Makefile:89: .depend: No such file or directory
lowc_stub.c: In function 'ocaml_AEAD_create':
lowc_stub.c:90:18: warning: unused variable 'keylen' [-Wunused-variable]
uint32_t keylen = caml_string_length(key);
^
File "test/mitls.ml", line 58, characters 12-28:
Warning 6: labels were omitted in the application of this function.
File "test/mitls.ml", line 63, characters 12-28:
Warning 6: labels were omitted in the application of this function.
File "test/mitls.ml", line 68, characters 12-28:
Warning 6: labels were omitted in the application of this function.
File "test/mitls.ml", line 104, characters 2-656:
Warning 4: this pattern-matching is fragile.
It will remain exhaustive when constructors are added to type TLSConstants.protocolVersion.
File "test/mitls.ml", line 104, characters 2-656:
Warning 4: this pattern-matching is fragile.
It will remain exhaustive when constructors are added to type TLSConstants.protocolVersion.
